// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Schedule.Persistence.Context;

#nullable disable

namespace Schedule.Persistence.Migrations
{
    [DbContext(typeof(ScheduleDbContext))]
    partial class ScheduleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Schedule.Core.Models.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassroomId"));

                    b.Property<string>("Cabinet")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ClassroomId");

                    b.HasIndex(new[] { "Cabinet" }, "IX_Classrooms")
                        .IsUnique();

                    b.ToTable("Classrooms", null, t =>
                        {
                            t.HasTrigger("Classrooms_Delete");
                        });

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            Cabinet = "0108",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 2,
                            Cabinet = "0109",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 3,
                            Cabinet = "0110",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 4,
                            Cabinet = "0111",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 5,
                            Cabinet = "0114",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 6,
                            Cabinet = "0115",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 7,
                            Cabinet = "0200",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 8,
                            Cabinet = "0201",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 9,
                            Cabinet = "0201а",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 10,
                            Cabinet = "0202",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 11,
                            Cabinet = "0204",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 12,
                            Cabinet = "0205",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 13,
                            Cabinet = "0207",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 14,
                            Cabinet = "0209",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 15,
                            Cabinet = "0209а",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 16,
                            Cabinet = "0300",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 17,
                            Cabinet = "0301",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 18,
                            Cabinet = "0302",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 19,
                            Cabinet = "0303",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 20,
                            Cabinet = "0305",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 21,
                            Cabinet = "0306",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 22,
                            Cabinet = "0307",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 23,
                            Cabinet = "0308",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 24,
                            Cabinet = "0309",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 25,
                            Cabinet = "104",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 26,
                            Cabinet = "105",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 27,
                            Cabinet = "215",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 28,
                            Cabinet = "219",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 29,
                            Cabinet = "220",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 30,
                            Cabinet = "221",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 31,
                            Cabinet = "222",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 32,
                            Cabinet = "226",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 33,
                            Cabinet = "228",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 34,
                            Cabinet = "230",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 35,
                            Cabinet = "300",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 36,
                            Cabinet = "301",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 37,
                            Cabinet = "303",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 38,
                            Cabinet = "304",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 39,
                            Cabinet = "305",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 40,
                            Cabinet = "306",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 41,
                            Cabinet = "306а",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 42,
                            Cabinet = "307",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 43,
                            Cabinet = "308",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 44,
                            Cabinet = "309",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 45,
                            Cabinet = "311",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 46,
                            Cabinet = "312",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 47,
                            Cabinet = "314",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 48,
                            Cabinet = "315",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 49,
                            Cabinet = "317",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 50,
                            Cabinet = "401",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 51,
                            Cabinet = "402",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 52,
                            Cabinet = "403",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 53,
                            Cabinet = "404",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 54,
                            Cabinet = "404а",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 55,
                            Cabinet = "405",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 56,
                            Cabinet = "406",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 57,
                            Cabinet = "407",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 58,
                            Cabinet = "408",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 59,
                            Cabinet = "409",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 60,
                            Cabinet = "411",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 61,
                            Cabinet = "411а",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 62,
                            Cabinet = "413",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 63,
                            Cabinet = "414",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 64,
                            Cabinet = "416",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 65,
                            Cabinet = "417",
                            IsDeleted = false
                        },
                        new
                        {
                            ClassroomId = 66,
                            Cabinet = "418",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            CourseId = 1
                        },
                        new
                        {
                            CourseId = 2
                        },
                        new
                        {
                            CourseId = 3
                        },
                        new
                        {
                            CourseId = 4
                        },
                        new
                        {
                            CourseId = 5
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Date", b =>
                {
                    b.Property<int>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateId"));

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStudy")
                        .HasColumnType("bit");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<DateTime>("Value")
                        .HasColumnType("date");

                    b.Property<int>("WeekTypeId")
                        .HasColumnType("int");

                    b.HasKey("DateId");

                    b.HasIndex("DayId");

                    b.HasIndex("WeekTypeId");

                    b.HasIndex(new[] { "Value" }, "IX_Dates")
                        .IsUnique();

                    b.ToTable("Dates", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.Day", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayId"));

                    b.Property<bool>("IsStudy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DayId");

                    b.HasIndex(new[] { "Name" }, "IX_Days")
                        .IsUnique();

                    b.ToTable("Days", (string)null);

                    b.HasData(
                        new
                        {
                            DayId = 1,
                            IsStudy = true,
                            Name = "Понедельник"
                        },
                        new
                        {
                            DayId = 2,
                            IsStudy = true,
                            Name = "Вторник"
                        },
                        new
                        {
                            DayId = 3,
                            IsStudy = true,
                            Name = "Среда"
                        },
                        new
                        {
                            DayId = 4,
                            IsStudy = true,
                            Name = "Четверг"
                        },
                        new
                        {
                            DayId = 5,
                            IsStudy = true,
                            Name = "Пятница"
                        },
                        new
                        {
                            DayId = 6,
                            IsStudy = true,
                            Name = "Суббота"
                        },
                        new
                        {
                            DayId = 7,
                            IsStudy = false,
                            Name = "Воскресенье"
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DisciplineTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int");

                    b.HasKey("DisciplineId");

                    b.HasIndex("DisciplineTypeId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("TermId");

                    b.HasIndex(new[] { "Code", "Name", "SpecialityId", "TermId" }, "IX_Disciplines")
                        .IsUnique();

                    b.ToTable("Disciplines", null, t =>
                        {
                            t.HasTrigger("Disciplines_Delete");
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.DisciplineType", b =>
                {
                    b.Property<int>("DisciplineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("DisciplineTypeId");

                    b.ToTable("DisciplineType", (string)null);

                    b.HasData(
                        new
                        {
                            DisciplineTypeId = 1,
                            Name = "Дисциплина"
                        },
                        new
                        {
                            DisciplineTypeId = 2,
                            Name = "Практика"
                        },
                        new
                        {
                            DisciplineTypeId = 3,
                            Name = "Внекласная деятельность"
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsAfterEleven")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("TermId");

                    b.HasIndex(new[] { "Number", "EnrollmentYear", "SpecialityId" }, "IX_Groups")
                        .IsUnique();

                    b.ToTable("Groups", null, t =>
                        {
                            t.HasTrigger("Groups_Delete");

                            t.HasTrigger("Groups_Insert");
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.GroupGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId2")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "GroupId2")
                        .HasName("PK_GroupGroups");

                    b.HasIndex("GroupId2");

                    b.ToTable("GroupGroups", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.GroupTransfer", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("NextTermId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTransferred")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("date");

                    b.HasKey("GroupId", "NextTermId");

                    b.HasIndex("NextTermId");

                    b.ToTable("GroupTransfers", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChanged")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Subgroup")
                        .HasColumnType("int");

                    b.Property<int?>("TimeId")
                        .HasColumnType("int");

                    b.Property<int>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("LessonId")
                        .HasName("PK_Pairs");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TimeId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTeacherClassroom", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "TeacherId")
                        .HasName("PK_PairTeachers");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LessonTeacherClassrooms", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTemplate", b =>
                {
                    b.Property<int>("LessonTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonTemplateId"));

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("Subgroup")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("LessonTemplateId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TimeId");

                    b.ToTable("LessonTemplates", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTemplateTeacherClassroom", b =>
                {
                    b.Property<int>("LessonTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.HasKey("LessonTemplateId", "TeacherId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LessonTemplateTeacherClassrooms", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "Name" }, "IX_Roles")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Schedule.Core.Models.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTermId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SpecialityId");

                    b.HasIndex("MaxTermId");

                    b.HasIndex(new[] { "Code", "Name" }, "IX_Specialities")
                        .IsUnique();

                    b.ToTable("Specialities", null, t =>
                        {
                            t.HasTrigger("Specialities_Delete");
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TeacherId");

                    b.HasIndex(new[] { "Email" }, "IX_Teachers")
                        .IsUnique();

                    b.ToTable("Teachers", null, t =>
                        {
                            t.HasTrigger("Teachers_Delete");
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"));

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int>("WeekTypeId")
                        .HasColumnType("int");

                    b.HasKey("TemplateId");

                    b.HasIndex("DayId");

                    b.HasIndex("TermId");

                    b.HasIndex("WeekTypeId");

                    b.HasIndex(new[] { "GroupId", "TermId", "DayId", "WeekTypeId" }, "IX_Templates_1")
                        .IsUnique();

                    b.HasIndex(new[] { "GroupId" }, "IX_Templates_GroupId");

                    b.ToTable("Templates", null, t =>
                        {
                            t.HasTrigger("Templates_Insert");
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseTerm")
                        .HasColumnType("int");

                    b.HasKey("TermId");

                    b.HasIndex(new[] { "CourseId", "CourseTerm" }, "IX_Terms")
                        .IsUnique();

                    b.ToTable("Terms", (string)null);

                    b.HasData(
                        new
                        {
                            TermId = 1,
                            CourseId = 1,
                            CourseTerm = 1
                        },
                        new
                        {
                            TermId = 2,
                            CourseId = 1,
                            CourseTerm = 2
                        },
                        new
                        {
                            TermId = 3,
                            CourseId = 2,
                            CourseTerm = 1
                        },
                        new
                        {
                            TermId = 4,
                            CourseId = 2,
                            CourseTerm = 2
                        },
                        new
                        {
                            TermId = 5,
                            CourseId = 3,
                            CourseTerm = 1
                        },
                        new
                        {
                            TermId = 6,
                            CourseId = 3,
                            CourseTerm = 2
                        },
                        new
                        {
                            TermId = 7,
                            CourseId = 4,
                            CourseTerm = 1
                        },
                        new
                        {
                            TermId = 8,
                            CourseId = 4,
                            CourseTerm = 2
                        },
                        new
                        {
                            TermId = 9,
                            CourseId = 5,
                            CourseTerm = 1
                        },
                        new
                        {
                            TermId = 10,
                            CourseId = 5,
                            CourseTerm = 2
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("TimeId");

                    b.HasIndex(new[] { "TypeId", "LessonNumber" }, "IX_Times")
                        .IsUnique();

                    b.ToTable("Times", null, t =>
                        {
                            t.HasTrigger("Times_Delete");
                        });

                    b.HasData(
                        new
                        {
                            TimeId = 1,
                            Duration = 2,
                            End = new TimeSpan(0, 10, 10, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 1,
                            Start = new TimeSpan(0, 8, 30, 0, 0),
                            TypeId = 1
                        },
                        new
                        {
                            TimeId = 2,
                            Duration = 2,
                            End = new TimeSpan(0, 12, 0, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 2,
                            Start = new TimeSpan(0, 10, 20, 0, 0),
                            TypeId = 1
                        },
                        new
                        {
                            TimeId = 3,
                            Duration = 2,
                            End = new TimeSpan(0, 14, 20, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 3,
                            Start = new TimeSpan(0, 12, 40, 0, 0),
                            TypeId = 1
                        },
                        new
                        {
                            TimeId = 4,
                            Duration = 2,
                            End = new TimeSpan(0, 16, 10, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 4,
                            Start = new TimeSpan(0, 14, 30, 0, 0),
                            TypeId = 1
                        },
                        new
                        {
                            TimeId = 5,
                            Duration = 2,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 5,
                            Start = new TimeSpan(0, 16, 20, 0, 0),
                            TypeId = 1
                        },
                        new
                        {
                            TimeId = 6,
                            Duration = 2,
                            End = new TimeSpan(0, 9, 45, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 1,
                            Start = new TimeSpan(0, 8, 30, 0, 0),
                            TypeId = 2
                        },
                        new
                        {
                            TimeId = 7,
                            Duration = 2,
                            End = new TimeSpan(0, 11, 10, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 2,
                            Start = new TimeSpan(0, 9, 55, 0, 0),
                            TypeId = 2
                        },
                        new
                        {
                            TimeId = 8,
                            Duration = 2,
                            End = new TimeSpan(0, 12, 55, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 3,
                            Start = new TimeSpan(0, 11, 40, 0, 0),
                            TypeId = 2
                        },
                        new
                        {
                            TimeId = 9,
                            Duration = 2,
                            End = new TimeSpan(0, 14, 20, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 4,
                            Start = new TimeSpan(0, 13, 5, 0, 0),
                            TypeId = 2
                        },
                        new
                        {
                            TimeId = 10,
                            Duration = 2,
                            End = new TimeSpan(0, 15, 45, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 5,
                            Start = new TimeSpan(0, 14, 30, 0, 0),
                            TypeId = 2
                        },
                        new
                        {
                            TimeId = 11,
                            Duration = 1,
                            End = new TimeSpan(0, 9, 15, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 0,
                            Start = new TimeSpan(0, 8, 30, 0, 0),
                            TypeId = 3
                        },
                        new
                        {
                            TimeId = 12,
                            Duration = 2,
                            End = new TimeSpan(0, 11, 0, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 1,
                            Start = new TimeSpan(0, 9, 20, 0, 0),
                            TypeId = 3
                        },
                        new
                        {
                            TimeId = 13,
                            Duration = 2,
                            End = new TimeSpan(0, 12, 50, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 2,
                            Start = new TimeSpan(0, 11, 10, 0, 0),
                            TypeId = 3
                        },
                        new
                        {
                            TimeId = 14,
                            Duration = 2,
                            End = new TimeSpan(0, 15, 10, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 3,
                            Start = new TimeSpan(0, 13, 30, 0, 0),
                            TypeId = 3
                        },
                        new
                        {
                            TimeId = 15,
                            Duration = 2,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 4,
                            Start = new TimeSpan(0, 15, 20, 0, 0),
                            TypeId = 3
                        },
                        new
                        {
                            TimeId = 16,
                            Duration = 2,
                            End = new TimeSpan(0, 18, 50, 0, 0),
                            IsDeleted = false,
                            LessonNumber = 5,
                            Start = new TimeSpan(0, 17, 10, 0, 0),
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.TimeType", b =>
                {
                    b.Property<int>("TimeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeTypeId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TimeTypeId");

                    b.HasIndex(new[] { "Name" }, "IX_TimeTypes")
                        .IsUnique();

                    b.ToTable("TimeTypes", null, t =>
                        {
                            t.HasTrigger("TimeTypes_Delete");
                        });

                    b.HasData(
                        new
                        {
                            TimeTypeId = 1,
                            IsDeleted = false,
                            Name = "Стандартное"
                        },
                        new
                        {
                            TimeTypeId = 2,
                            IsDeleted = false,
                            Name = "Сокращенное"
                        },
                        new
                        {
                            TimeTypeId = 3,
                            IsDeleted = false,
                            Name = "Понедельник"
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Timetable", b =>
                {
                    b.Property<int>("TimetableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimetableId"));

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("TimetableId");

                    b.HasIndex(new[] { "DateId", "GroupId" }, "IX_Timetables")
                        .IsUnique();

                    b.HasIndex(new[] { "DateId" }, "IX_Timetables_DateId");

                    b.HasIndex(new[] { "GroupId" }, "IX_Timetables_GroupId");

                    b.ToTable("Timetables", null, t =>
                        {
                            t.HasTrigger("Timetables_Insert");
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Login" }, "IX_Users")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Login = "Admin",
                            PasswordHash = "$2a$11$/AKGJmbjT9.J/pdMmIk7S.VItgYYrknXhoPAUsTRIUqzIUXVw25zq",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Login = "Editor",
                            PasswordHash = "$2a$11$qtS1HuNq4Q/9/gnERQJunu9U0wEYvtxbN2Z8senRvOLUF1gn/OV3i",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.WeekType", b =>
                {
                    b.Property<int>("WeekTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeekTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WeekTypeId");

                    b.HasIndex(new[] { "Name" }, "IX_WeekTypes")
                        .IsUnique();

                    b.ToTable("WeekTypes", (string)null);

                    b.HasData(
                        new
                        {
                            WeekTypeId = 1,
                            Name = "Знаменатель"
                        },
                        new
                        {
                            WeekTypeId = 2,
                            Name = "Числитель"
                        });
                });

            modelBuilder.Entity("Schedule.Core.Models.Date", b =>
                {
                    b.HasOne("Schedule.Core.Models.Day", "Day")
                        .WithMany("Dates")
                        .HasForeignKey("DayId")
                        .IsRequired()
                        .HasConstraintName("FK_Dates_Days");

                    b.HasOne("Schedule.Core.Models.WeekType", "WeekType")
                        .WithMany("Dates")
                        .HasForeignKey("WeekTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Dates_WeekTypes");

                    b.Navigation("Day");

                    b.Navigation("WeekType");
                });

            modelBuilder.Entity("Schedule.Core.Models.Discipline", b =>
                {
                    b.HasOne("Schedule.Core.Models.DisciplineType", "DisciplineType")
                        .WithMany("Disciplines")
                        .HasForeignKey("DisciplineTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Disciplines_DisciplineType");

                    b.HasOne("Schedule.Core.Models.Speciality", "Speciality")
                        .WithMany("Disciplines")
                        .HasForeignKey("SpecialityId")
                        .IsRequired()
                        .HasConstraintName("FK_Disciplines_Specialities");

                    b.HasOne("Schedule.Core.Models.Term", "Term")
                        .WithMany("Disciplines")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK_Disciplines_Terms");

                    b.Navigation("DisciplineType");

                    b.Navigation("Speciality");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Schedule.Core.Models.Group", b =>
                {
                    b.HasOne("Schedule.Core.Models.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Specialities");

                    b.HasOne("Schedule.Core.Models.Term", "Term")
                        .WithMany("Groups")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Terms");

                    b.Navigation("Speciality");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Schedule.Core.Models.GroupGroup", b =>
                {
                    b.HasOne("Schedule.Core.Models.Group", "Group")
                        .WithMany("GroupGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupGroups_Groups");

                    b.HasOne("Schedule.Core.Models.Group", "Group2")
                        .WithMany("GroupGroups1")
                        .HasForeignKey("GroupId2")
                        .IsRequired()
                        .HasConstraintName("FK_GroupGroups_Groups1");

                    b.Navigation("Group");

                    b.Navigation("Group2");
                });

            modelBuilder.Entity("Schedule.Core.Models.GroupTransfer", b =>
                {
                    b.HasOne("Schedule.Core.Models.Group", "Group")
                        .WithMany("GroupTransfers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_TransferingGroupsHistory_Groups");

                    b.HasOne("Schedule.Core.Models.Term", "NextTerm")
                        .WithMany("GroupTransfers")
                        .HasForeignKey("NextTermId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupTransfers_Terms");

                    b.Navigation("Group");

                    b.Navigation("NextTerm");
                });

            modelBuilder.Entity("Schedule.Core.Models.Lesson", b =>
                {
                    b.HasOne("Schedule.Core.Models.Discipline", "Discipline")
                        .WithMany("Lessons")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_Pairs_Disciplines");

                    b.HasOne("Schedule.Core.Models.Time", "Time")
                        .WithMany("Lessons")
                        .HasForeignKey("TimeId")
                        .HasConstraintName("FK_Pairs_Times");

                    b.HasOne("Schedule.Core.Models.Timetable", "Timetable")
                        .WithMany("Lessons")
                        .HasForeignKey("TimetableId")
                        .IsRequired()
                        .HasConstraintName("FK_Pairs_Timetables");

                    b.Navigation("Discipline");

                    b.Navigation("Time");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTeacherClassroom", b =>
                {
                    b.HasOne("Schedule.Core.Models.Classroom", "Classroom")
                        .WithMany("LessonTeacherClassrooms")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_LessonTeacherClassrooms_Classrooms2");

                    b.HasOne("Schedule.Core.Models.Lesson", "Lesson")
                        .WithMany("LessonTeacherClassrooms")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonTeacherClassrooms_Lessons");

                    b.HasOne("Schedule.Core.Models.Teacher", "Teacher")
                        .WithMany("LessonTeacherClassrooms")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonTeacherClassrooms_Teachers1");

                    b.Navigation("Classroom");

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTemplate", b =>
                {
                    b.HasOne("Schedule.Core.Models.Discipline", "Discipline")
                        .WithMany("LessonTemplates")
                        .HasForeignKey("DisciplineId")
                        .HasConstraintName("FK_LessonTemplates_Disciplines");

                    b.HasOne("Schedule.Core.Models.Template", "Template")
                        .WithMany("LessonTemplates")
                        .HasForeignKey("TemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonTemplates_Templates");

                    b.HasOne("Schedule.Core.Models.Time", "Time")
                        .WithMany("LessonTemplates")
                        .HasForeignKey("TimeId")
                        .HasConstraintName("FK_LessonTemplates_Times");

                    b.Navigation("Discipline");

                    b.Navigation("Template");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTemplateTeacherClassroom", b =>
                {
                    b.HasOne("Schedule.Core.Models.Classroom", "Classroom")
                        .WithMany("LessonTemplateTeacherClassrooms")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_LessonTemplateTeacherClassrooms_Classrooms");

                    b.HasOne("Schedule.Core.Models.LessonTemplate", "LessonTemplate")
                        .WithMany("LessonTemplateTeacherClassrooms")
                        .HasForeignKey("LessonTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonTemplateTeacherClassrooms_LessonTemplates");

                    b.HasOne("Schedule.Core.Models.Teacher", "Teacher")
                        .WithMany("LessonTemplateTeacherClassrooms")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonTemplateTeacherClassrooms_Teachers");

                    b.Navigation("Classroom");

                    b.Navigation("LessonTemplate");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Schedule.Core.Models.Session", b =>
                {
                    b.HasOne("Schedule.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Sessions_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Schedule.Core.Models.Speciality", b =>
                {
                    b.HasOne("Schedule.Core.Models.Term", "MaxTerm")
                        .WithMany("Specialities")
                        .HasForeignKey("MaxTermId")
                        .IsRequired()
                        .HasConstraintName("FK_Specialities_Terms");

                    b.Navigation("MaxTerm");
                });

            modelBuilder.Entity("Schedule.Core.Models.Template", b =>
                {
                    b.HasOne("Schedule.Core.Models.Day", "Day")
                        .WithMany("Templates")
                        .HasForeignKey("DayId")
                        .IsRequired()
                        .HasConstraintName("FK_Templates_Days");

                    b.HasOne("Schedule.Core.Models.Group", "Group")
                        .WithMany("Templates")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Templates_Groups");

                    b.HasOne("Schedule.Core.Models.Term", "Term")
                        .WithMany("Templates")
                        .HasForeignKey("TermId")
                        .IsRequired()
                        .HasConstraintName("FK_Templates_Terms");

                    b.HasOne("Schedule.Core.Models.WeekType", "WeekType")
                        .WithMany("Templates")
                        .HasForeignKey("WeekTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Templates_WeekTypes");

                    b.Navigation("Day");

                    b.Navigation("Group");

                    b.Navigation("Term");

                    b.Navigation("WeekType");
                });

            modelBuilder.Entity("Schedule.Core.Models.Term", b =>
                {
                    b.HasOne("Schedule.Core.Models.Course", "Course")
                        .WithMany("Terms")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Terms_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Schedule.Core.Models.Time", b =>
                {
                    b.HasOne("Schedule.Core.Models.TimeType", "Type")
                        .WithMany("Times")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Times_TimeTypes");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Schedule.Core.Models.Timetable", b =>
                {
                    b.HasOne("Schedule.Core.Models.Date", "Date")
                        .WithMany("Timetables")
                        .HasForeignKey("DateId")
                        .IsRequired()
                        .HasConstraintName("FK_Timetables_Dates");

                    b.HasOne("Schedule.Core.Models.Group", "Group")
                        .WithMany("Timetables")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Timetables_Groups");

                    b.Navigation("Date");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Schedule.Core.Models.User", b =>
                {
                    b.HasOne("Schedule.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Schedule.Core.Models.Classroom", b =>
                {
                    b.Navigation("LessonTeacherClassrooms");

                    b.Navigation("LessonTemplateTeacherClassrooms");
                });

            modelBuilder.Entity("Schedule.Core.Models.Course", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Schedule.Core.Models.Date", b =>
                {
                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("Schedule.Core.Models.Day", b =>
                {
                    b.Navigation("Dates");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Schedule.Core.Models.Discipline", b =>
                {
                    b.Navigation("LessonTemplates");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Schedule.Core.Models.DisciplineType", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("Schedule.Core.Models.Group", b =>
                {
                    b.Navigation("GroupGroups");

                    b.Navigation("GroupGroups1");

                    b.Navigation("GroupTransfers");

                    b.Navigation("Templates");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("Schedule.Core.Models.Lesson", b =>
                {
                    b.Navigation("LessonTeacherClassrooms");
                });

            modelBuilder.Entity("Schedule.Core.Models.LessonTemplate", b =>
                {
                    b.Navigation("LessonTemplateTeacherClassrooms");
                });

            modelBuilder.Entity("Schedule.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Schedule.Core.Models.Speciality", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Schedule.Core.Models.Teacher", b =>
                {
                    b.Navigation("LessonTeacherClassrooms");

                    b.Navigation("LessonTemplateTeacherClassrooms");
                });

            modelBuilder.Entity("Schedule.Core.Models.Template", b =>
                {
                    b.Navigation("LessonTemplates");
                });

            modelBuilder.Entity("Schedule.Core.Models.Term", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("GroupTransfers");

                    b.Navigation("Groups");

                    b.Navigation("Specialities");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Schedule.Core.Models.Time", b =>
                {
                    b.Navigation("LessonTemplates");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Schedule.Core.Models.TimeType", b =>
                {
                    b.Navigation("Times");
                });

            modelBuilder.Entity("Schedule.Core.Models.Timetable", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Schedule.Core.Models.WeekType", b =>
                {
                    b.Navigation("Dates");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
